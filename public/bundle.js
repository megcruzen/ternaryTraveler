(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _placeData = _interopRequireDefault(require("./placeData"));

var _placeList = _interopRequireDefault(require("./placeList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Contains all event listeners
const eventListeners = {
  // Add new article
  postPlace() {
    // Get user input (value of each field)
    let inputPlaceName = document.querySelector("#place_name").value;
    let inputPlaceDescription = document.querySelector("#place_description").value;
    let inputPlaceCost = document.querySelector("#place_cost").value;
    let inputPlaceCity = document.querySelector("#place_city").value; // Create new object with correct DB structure to represent a single place item:

    let placeToSave = {
      name: inputPlaceName,
      description: inputPlaceDescription,
      cost: inputPlaceCost,
      review: "",
      cityNameId: Number(inputPlaceCity) // Save article to database
      // Then rebuild the article list on DOM

    };

    _placeData.default.postNewPlace(placeToSave).then(() => {
      _placeList.default.buildList();
    });
  } // Delete article
  // Edit article


};
var _default = eventListeners;
exports.default = _default;

},{"./placeData":4,"./placeList":6}],2:[function(require,module,exports){
"use strict";

var _placeList = _interopRequireDefault(require("./placeList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Calls placeList.buildList function
_placeList.default.buildList();

},{"./placeList":6}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _placeList = _interopRequireDefault(require("./placeList"));

var _placeData = _interopRequireDefault(require("./placeData"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Creates each place item that will be appended to DOM
const placeItem = {
  buildPlace(placeObj) {
    // argument passed from placeList
    // Build each place item
    // Create container for each item
    let placeSection = document.createElement("section"); // ex: foodArticle.setAttribute("id", `food--${foodObject.id}`)

    placeSection.setAttribute("class", "place_section"); // Name

    let placeName = document.createElement("h3");
    placeName.textContent = placeObj.name; // console.log(placeObj.name);
    // Description

    let placeDesc = document.createElement("p");
    placeDesc.textContent = placeObj.description; // Cost

    let placeCost = document.createElement("p");
    placeCost.textContent = placeObj.cost; // Review

    let placeReview = document.createElement("p");
    placeReview.textContent = placeObj.review; // City

    let placeCity = document.createElement("p");
    placeCity.textContent = placeObj.cityName.name; // Add button section

    let buttonHolder = document.createElement("div"); // edit button

    let editBtn = document.createElement("button");
    editBtn.textContent = "Edit";
    editBtn.setAttribute("class", "edit_place"); // GET
    // .then PUT

    editBtn.addEventListener("click", () => {
      let placeId = placeObj.id;

      _placeData.default.getPlace(placeId).then(response => {
        placeEditForm.createAndAppendForm(placeId, response);
      });
    }); // delete button

    let deleteBtn = document.createElement("button");
    deleteBtn.textContent = "Delete";
    deleteBtn.setAttribute("class", "delete_place");
    deleteBtn.addEventListener("click", () => {
      let placeId = placeObj.id;

      _placeData.default.deletePlace(placeId).then(() => {
        _placeList.default.buildList();
      });
    }); // Add "Edit" and "Delete" buttons to button holder

    buttonHolder.appendChild(editBtn);
    buttonHolder.appendChild(deleteBtn); // Append each element to placeSection

    placeSection.appendChild(placeName);
    placeSection.appendChild(placeDesc);
    placeSection.appendChild(placeCost);
    placeSection.appendChild(placeReview);
    placeSection.appendChild(placeCity);
    placeSection.appendChild(buttonHolder); // console.log(placeSection);

    return placeSection;
  }

};
var _default = placeItem;
exports.default = _default;

},{"./placeData":4,"./placeList":6}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Contains fetch calls to GET, POST, DELETE, and PUT
const placeData = {
  // GET
  getPlaces() {
    return fetch("http://localhost:8088/places?_expand=cityName").then(response => response.json());
  },

  // POST
  postNewPlace(placeToSave) {
    return fetch("http://localhost:8088/places", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(placeToSave)
    });
  },

  // DELETE
  deletePlace(placeId) {
    return fetch(`http://localhost:8088/places/${placeId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });
  },

  // PUT
  getPlace(placeId) {
    return fetch(`http://localhost:8088/places/${placeId}`).then(response => response.json());
  },

  // Need the id to identify which place item we want to edit, as well as the new data we want to replace the existing data with. So we need two arguments for the method.
  putExistingPlace(placeId, placeToEdit) {
    return fetch(`http://localhost:8088/places/${placeId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(placeToEdit)
    });
  }

};
var _default = placeData;
exports.default = _default;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventListeners = _interopRequireDefault(require("./eventListeners"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Creates form to save a new place item to database
const placeForm = {
  buildForm() {
    // Create container, title, etc.
    let output = document.querySelector("#output");
    let formContainer = document.createElement("div");
    formContainer.setAttribute("id", "form_container");
    let formContainerTitle = document.createElement("h3");
    formContainerTitle.textContent = "Add New Place";
    formContainer.appendChild(formContainerTitle); // Create "Name" field

    let name = document.createElement("fieldset");
    let nameLabel = document.createElement("label");
    nameLabel.textContent = "Name";
    nameLabel.setAttribute("for", "place_name");
    let nameInput = document.createElement("input");
    nameInput.setAttribute("id", "place_name");
    nameInput.setAttribute("name", "place_name");
    name.appendChild(nameLabel);
    name.appendChild(nameInput); // Create "Description" field

    let description = document.createElement("fieldset");
    let descriptionLabel = document.createElement("label");
    descriptionLabel.textContent = "Description";
    descriptionLabel.setAttribute("for", "place_description");
    let descriptionInput = document.createElement("textarea");
    descriptionInput.setAttribute("id", "place_description");
    descriptionInput.setAttribute("name", "place_description");
    description.appendChild(descriptionLabel);
    description.appendChild(descriptionInput); // Create "Cost" field

    let cost = document.createElement("fieldset");
    let costLabel = document.createElement("label");
    costLabel.textContent = "Cost";
    costLabel.setAttribute("for", "place_cost");
    let costInput = document.createElement("input");
    costInput.setAttribute("id", "place_cost");
    costInput.setAttribute("name", "place_cost");
    cost.appendChild(costLabel);
    cost.appendChild(costInput); // Create "City" drop-down

    let city = document.createElement("fieldset");
    let cityLabel = document.createElement("label");
    cityLabel.textContent = "City";
    let cityInput = document.createElement("select");
    cityInput.setAttribute("id", "place_city");
    cityInput.setAttribute("name", "place_city");
    let cityOptions = `
            <option value="1">Los Angeles</option>
            <option value="2">San Francisco</option>
            <option value="3">Toronto</option>
        `;
    cityInput.innerHTML = cityOptions;
    city.appendChild(cityLabel);
    city.appendChild(cityInput); // Create "Save" button and attach event listener

    let saveBtn = document.createElement("button");
    saveBtn.textContent = "Save Place";
    saveBtn.setAttribute("class", "save_new_place"); // Attach event listener to button, to POST to database

    saveBtn.addEventListener("click", _eventListeners.default.postPlace); // Append each field/button to form container

    formContainer.appendChild(name);
    formContainer.appendChild(description);
    formContainer.appendChild(cost);
    formContainer.appendChild(city);
    formContainer.appendChild(saveBtn);
    output.appendChild(formContainer);
  }

};
var _default = placeForm;
exports.default = _default;

},{"./eventListeners":1}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _placeData = _interopRequireDefault(require("./placeData"));

var _place = _interopRequireDefault(require("./place"));

var _placeForm = _interopRequireDefault(require("./placeForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Builds out place list and appends to DOM
// import eventListeners from "./eventListeners"
const placeList = {
  buildList() {
    // Create container, title, etc.
    let output = document.querySelector("#output");
    output.innerHTML = "";
    let title = document.createElement("h1");
    title.textContent = "The Ternary Traveler";
    output.appendChild(title);
    let listContainer = document.createElement("div");
    listContainer.setAttribute("id", "list_container"); // Add form here

    _placeForm.default.buildForm(); // Create doc frag to hold each place item


    let placeDocFrag = document.createDocumentFragment(); // GET place data

    _placeData.default.getPlaces().then(allPlaces => {
      allPlaces.forEach(placeItem => {
        // forEach place, call function to build HTML for each one and append each to doc frag
        let newPlace = _place.default.buildPlace(placeItem); // newPlace = placeSection


        placeDocFrag.appendChild(newPlace);
      }); // Append the doc frag to the DOM

      listContainer.appendChild(placeDocFrag);
    });

    output.appendChild(listContainer);
  }

};
var _default = placeList;
exports.default = _default;

},{"./place":3,"./placeData":4,"./placeForm":5}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
